### Rubyのバージョン確認

```ruby
ruby-v
```

### コマンドライン

Mac OSの場合はターミナルのこと

### irb

サンプルプログラムの実行には、irbと呼ばれる対話形式でスクリプトを実行するツール

### コードp

コードpは指定した値を標準出力し、値を出力後に改行する関数

irbでは入力した式の評価値を「=>」で出力する

### コードprint

出力後に改行しない関数

### 変数を初期化するとは

変数に初期値を設定する事を示す。プログラムで変数を使用する前に、その変数に初期値を代入すること

### 動的型言語

値が型の情報を管理するので、同じ変数に異なる型の値を代入することができること

### 定数の定義

変数名の先頭を大文字にすると、定数として定義することができる

定数に再代入すると、値を更新できるが警告が出力される

変化しない値は、定数で宣言する

### 「;」を使って改行で区切る箇所を連結できる

処理が単純な場合はこの記述方法が好ましい

### インタープリンター

コンピュータプログラムを実行するソフトウェアまたはハードウェアのこと

### Linuxでフォルダを作成するには
mkdir フォルダ名

### Linuxでファイルを作成するには

```ruby
touch ファイル名
```

組み込み定数の種類
### STDIN　(標準入力)

プログラムがデータを受け取るための入力ストリーム

(例)キーボドからテキストデータを入力するなどがある

### STDOUT (標準出力)

プログラムがデータや情報をコンソールやファイルなどに出力するためのストリーム

(例)コンソールへの出力メッセージ

### STDERR(標準エラー出力)

多くのプログラミング言語やコンピュータープログラムにおいて、エラー出力を表すファイルディスクリプタたまたはストリーム

(例)エラーメッセージの出力、ログ記録

※ファイルディスクリプタ：ファイルやデバイスとの対話、アクセス、管理に関する情報を識別し管理するための整数値

### ENV(Environment Variable(環境変数)

コンピュータシステムやソフトウェアプログラムが実行時に設定および参照するための変数

システム全体や個別のプロセスに関する設定を格納するのに使用される。

特定のプログラムが特定の設定情報を検索する場合に環境変数として提供される事が一般的

(例)パス情報、APIキー

### ARGF(Argument File(仮想ファイル)

引数を指定したファイルを引数順に処理を実行してくれるためプログラムを書く際は引数を渡し続けるだけで良くなるオブジェクト

### ARGV(Command Line Arguments(Rubyスクリプトに与えられた引数)

Rubyで使用される変数で、コマンドライン引数を格納してくれるためのキーみたいなものになってくれるのでパラメーターを渡す際に柔軟に渡す事ができる

(例)

```ruby
ruby my_script.rb arg1 arg2 arg3
```

上記のコマンドを入力し他場合、ARGV変数には

```ruby
["arg1", "arg2", "arg3"]
```

という配列が格納される。値を引き出す際も

```ruby
# コマンドライン引数の値を表示
puts "第1引数: #{ARGV[0]}"
puts "第2引数: #{ARGV[1]}"
puts "第3引数: #{ARGV[2]}"
```

という形で表示する事ができる

### DATA(**END**以降をアクセスrするFileオブジェクト)

 Rubyプログラム内に埋め込まれたデータを格納するためのファイルハンドル

Ruby内にデータを含め、それをプログラム内でアクセスするために使用される

(例)DATAファイルハンドルは、以下の方法で使われる

```ruby
puts DATA.read
__END__
This is some embedded data in the Ruby script.
It can be accessed using the DATA file handle.
```

1. Rubyスクリプト内にデータを含める: Rubyスクリプトのソースコードの末尾に、_ _ END_ _というタグを置き、その後にデータを記述する。これにより、その部分のテキストがデータとして扱われる。
2. データへのアクセス:DATAファイルハンドルを使用して、埋め込まれたデータにアクセスできる

```ruby
data = DATA.read
puts data
```

### コマンドラインオプション
### -h

ヘルプを表示する

### -v

バージョンを表示する

### -C

指定されたファイルが文法的に正しいか確認する。実行はしない

### -e

指定された文字列をRubyプログラムとして実行する。いわゆるワンライナーの実行

### -w

冗長モードでの実行。普段出力しないワーニングが出力される

### -WO -W1 -W2 -W

出力範囲を指定した冗長モードでの実行。-Wと-W2では全て出力する

### -I

＄LOAD_PATHに、指定されたファイルを実行する

### -r

スクリプト実行前に、指定された文字列を追加する

-rオプションを使用して、特定のライブラリーをスクリプト内で使用できるように先に読み込む必要がある場合に使用する

### -d

デバックモードで実行する

変数の値やエラーメッセージの詳細な表示がされる

### スクリプトとは

プログラミング言語で書かれた簡単なプログラムや処理を示す

### requireとload

コマンドラインオプションの-rは、スクリプト実行前に、指定されたライブラリを読み込む

この様にスクリプトとは異なるファイルの実行は、プログラム内からも可能で、requireかloadという関数を使う。

同じディレクトリの中で下のコマンドを実行するとtest.rb が実行される
```ruby
require "test"
```

### requireとload の違い

1. **対象のファイルが1回しか読み込まれないかどうか:**
    - **require**: 同じファイルが複数回**require**されても、初回の読み込み時に一度だけ実行されます。Rubyは読み込まれたファイルのパスを記憶し、2回目以降は再実行されません。
    - **load**: **load**は毎回ファイルを再読み込みし、ファイルの内容が変更されていたとしても再実行します。
2. **拡張子の自動補完:**
    - **require**: **.rb**（Rubyスクリプト）の拡張子が省略されている場合、自動的に補完されます。たとえば、**require 'example'**は**example.rb**を読み込もうとします。
    - **load**: 拡張子の自動補完は行われません。明示的にファイルのパスを指定する必要があります。
3. **戻り値:**
    - **require**: 読み込みが成功した場合、**true**が返ります。失敗した場合は**false**が返ります。
    - **load**: ファイルの実行が成功した場合、**true**が返ります。失敗した場合は例外が発生し、プログラムが停止します。
4. **ファイルの探索パス:**
    - **require**: Rubyが標準で探索するロードパス（**$LOAD_PATH**）上にある場合、ファイルを見つけることができます。このパスは通常、インストールされたGemや標準ライブラリのパスが含まれます。
    - **load**: ファイルのパスを直接指定する必要があり、探索パスは使用されません。
    
    この様な違いから、requireはライブラリ、loadは設定情報の読み込み用と使い分けるのが一般的

### ライブラリ

再利用可能なコードや機能の集合体で、プログラミングにおいて使用される。

特定の目的や機能を実行するために作成され、他のプログラムやプロジェクトで再利用される事が意図されている。

### $LOAD_PATHとは

Rubyプログラムがライブラリやファイルを探す際に検索するディレクトリを絶対パスで保存している。これはRubyのロードパスとも呼ばれ、ロードパスにはデフォルトでいくつかのディレクトリが含まれており、これにユーザーが追加できる。

Rubyプログラムはrequireメソッドを使用して外部のライブラリやファイルを読み込む事がある。この際Rubyは$LOAD_PATHのディレクトリを順番に検索して、最初に見つかったものを読み込む。もし指定してライブラリやファイルが見つからない場合、LoadErrorが発生する。

```ruby
# 現在のロードパスを表示
puts $LOAD_PATH

# ロードパスに新しいディレクトリを追加
$LOAD_PATH << "/path/to/your/directory"

# ロードパスに追加されたディレクトリからファイルをrequire
require "your_file"
```

ここで、$LOAD_PATHに新しいディレクトリを追加することで、そのディレクトリ内のファイルがrequireメソッドで参照できるようになる。
この読み込み順序を拡張する方法が２つある。１つが、-Iオプションでここで指定したフォルダを最優先で検索する。もう１つが環境変数RUBYLIBで、ここで設定されたパスは、$LOAD_PATHの次に検索する。
